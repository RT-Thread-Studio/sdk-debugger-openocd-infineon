#
# Copyright (C) <2024>
#   <Cypress Semiconductor Corporation (an Infineon company)>
#
# Common subroutines for CAT1* categories of microcontrollers.
# The definitions may be overwritten from the family and device-specific scripts.
source [find target/cympn.cfg]
source [find mem_helper.tcl]

# Mapping between target from the MPN database and their configuration files
set TARGET_VAR_CONFIG_DICT [dict create \
	PSoC6ABLE2 infineon/cy8c6xx.cfg                                                                   \
	PSoC6A256K infineon/cy8cxx4.cfg                                                                   \
	PSoC6A512K infineon/cy8cxx5.cfg                                                                   \
	PSoC6A2M   infineon/cy8cxxa.cfg                                                                   \
	FX3G2      infineon/fx3gx.cfg                                                                     \
	TVIIBH4M   {infineon/cytxbb.cfg", "traveo2_4m.cfg}                                                \
	TVIIC2D6M  {infineon/cyt4dn.cfg", "traveo2_6m.cfg" or "traveo2_6m_b0.cfg" or "traveo2_6m_b1.cfg}  \
	TVIIBH8M   {infineon/cyt4bf.cfg", "traveo2_8m.cfg" or "traveo2_8m_b0.cfg}                         \
	TVIIBE1M   infineon/cyt2b7.cfg                                                                    \
	TVIIBE2M   infineon/cyt2b9.cfg                                                                    \
	TVIIBE4M   infineon/cyt2bl.cfg                                                                    \
	CYW20289   infineon/cyw20289.cfg                                                                  \
]

namespace eval cat1 {

	namespace import ::arm::*
	namespace import ::ifx::*

	# Set Test Mode (Listen Window) acquisition parameters for KitProg3/MiniProg4
	proc kitprog3_acquire_config { timeout } {
		log_proc_entry
		if {[adapter name] eq "kitprog3"} {
			if {!$::ENABLE_ACQUIRE || [using_jtag]} {
				kitprog3 acquire_config off
			} else {
				# Set TM acquisition timeout (in seconds), custom target, and bytes sequence.
				# Overwrite KP3 default timeout (1 sec) only if we need more.
				if {$timeout / 1000 > 1} {
					kitprog3 acquire_config on 0 0 0 $timeout 0
				}
				kitprog3 acquire_config on {*}[split $::KP3_ACQUIRE_TM_CMD " "]
			}
		}
	}

	# Checks the correspondance of provided cfg file and a connected device
	proc check_cfg_matches_target { TARGET_VAR SERIES } {
		set tgt [target current]
		set CHIPNAME [string range ${tgt} 0 [expr {[string first "." ${tgt}] - 1}]]
		global ${CHIPNAME}::wrong_cfg_msg
		global ${CHIPNAME}::TARGET_VARIANT
		global TARGET_VAR_CONFIG_DICT

		if {![info exists ${CHIPNAME}::TARGET_VARIANT]} return
		set is_psoc64 [string equal -nocase $SERIES "PSoC 64"]
		set is_psoc64_cfg [string equal -nocase $CHIPNAME "psoc64"]
		set is_psoc4500 [string equal -nocase $SERIES "PSoC 4500H"]
		set is_psoc4500_cfg [string equal -nocase $CHIPNAME "psoc4500"]
		set is_traveo512 [string equal -nocase $SERIES "CYT2B6"]
		set is_xmc5100 [string equal -nocase $SERIES "XMC5100"]
		set is_traveo512_xmc5100_cfg [string equal -nocase [ set ${CHIPNAME}::TARGET_VARIANT ] "TVIIBE1M_512K"]
		set is_traveo1m [string match -nocase "CYT2B7*" $SERIES]
		set is_xmc5200 [string equal -nocase $SERIES "XMC5200"]
		set is_traveo1m_xmc5200_cfg [string equal -nocase [ set ${CHIPNAME}::TARGET_VARIANT ] "TVIIBE1M"]
		set is_traveo2m [string match -nocase "CYT2B9*" $SERIES]
		set is_xmc5300 [string equal -nocase $SERIES "XMC5300"]
		set is_traveo2m_xmc5300_cfg [string equal -nocase [ set ${CHIPNAME}::TARGET_VARIANT ] "TVIIBE2M"]
		set config_check [string equal [lsearch -exact [set ${CHIPNAME}::TARGET_VARIANT] $TARGET_VAR ] "-1" ]

		if { (($config_check && (!($is_xmc5100 || $is_traveo512 || $is_xmc5200 || $is_traveo1m || $is_xmc5300 || $is_traveo2m))) || 
		((($is_psoc64 && !$is_psoc64_cfg) || (!$is_psoc64 && $is_psoc64_cfg)) ||
		(($is_psoc4500 && !$is_psoc4500_cfg) || (!$is_psoc4500 && $is_psoc4500_cfg)) ||
		((($is_traveo512 || $is_xmc5100) && !$is_traveo512_xmc5100_cfg) || 
		(!($is_traveo512 || $is_xmc5100) && $is_traveo512_xmc5100_cfg)) ||
		((($is_traveo1m || $is_xmc5200) && !$is_traveo1m_xmc5200_cfg) || 
		(!($is_traveo1m || $is_xmc5200) && $is_traveo1m_xmc5200_cfg)) ||
		((($is_traveo2m || $is_xmc5300) && !$is_traveo2m_xmc5300_cfg) || 
		(!($is_traveo2m || $is_xmc5300) && $is_traveo2m_xmc5300_cfg)))) } {
			if { [info exists TARGET_VAR_CONFIG_DICT($TARGET_VAR)] } {
				if { $is_psoc64 } {
					if {[string equal -nocase $TARGET_VAR "PSoC6ABLE2"]} {
						set ${CHIPNAME}::wrong_cfg_msg \"infineon/cyxx64x7.cfg\"
					} elseif {[string equal -nocase $TARGET_VAR "PSoC6A512K"]} {
						set ${CHIPNAME}::wrong_cfg_msg \"infineon/cyxx64x5.cfg\"
					} else {
						set ${CHIPNAME}::wrong_cfg_msg \"infineon/cyxx64xa.cfg\"
					}
				} elseif { $is_traveo512 } {
					set ${CHIPNAME}::wrong_cfg_msg \"infineon/cyt2b6.cfg\"
				} elseif { $is_psoc4500 } {
					set ${CHIPNAME}::wrong_cfg_msg \"infineon/psoc4500h.cfg\"
				} elseif { $is_xmc5100 } {
					set ${CHIPNAME}::wrong_cfg_msg \"infineon/xmc5100.cfg\"
				} elseif { $is_xmc5200 } {
					set ${CHIPNAME}::wrong_cfg_msg \"infineon/xmc5200.cfg\"
				} elseif { $is_xmc5300 } {
					set ${CHIPNAME}::wrong_cfg_msg \"infineon/xmc5300.cfg\"
				} else {
					set ${CHIPNAME}::wrong_cfg_msg \"$TARGET_VAR_CONFIG_DICT($TARGET_VAR)\"
				}
			} else {
				set ${CHIPNAME}::wrong_cfg_msg "proper"
			}
		}
	}

	# KitProg3 acquire/power control stuff
	proc define_kitprog3_acquire_options { target } {
		global ENABLE_ACQUIRE
		global ENABLE_POWER_SUPPLY

		if [string match "psoc6*" $target ] {
			set kp3_target 2
			set kp3_status "on"
		} elseif {	[string match "traveo2*" $target ] || 
					[string match "cat1c" $target ] ||
					[string match "xmc5*" $target ] } {
			set kp3_target 3
			set kp3_status "on"
		} elseif [string match "cyw20829" $target ] {
			set kp3_target 4
			set kp3_status "off"
		} else {
			puts stderr "define_kitprog3_acquire_options: target $target not supported"
			return
		}

		if { [adapter name] ne "kitprog3" } {
			set ENABLE_ACQUIRE  0
			set ENABLE_POWER_SUPPLY 0
			echo "** Test Mode acquire not supported by selected adapter"
			if {[using_jtag]} {
				echo "** Test Mode acquire disabled (not supported in JTAG mode)"
			}
		} elseif {[using_jtag]} {
			set ENABLE_ACQUIRE 0
			echo "** Test Mode acquire disabled (not supported in JTAG mode)"
		} else {
			if { ( $ENABLE_ACQUIRE != 0 ) && ( $ENABLE_ACQUIRE != 1 ) && ( $ENABLE_ACQUIRE != 2 ) } {
				puts stderr "** Invalid ENABLE_ACQUIRE value ($ENABLE_ACQUIRE). Allowed values are:"
				puts stderr "**  0 - Test Mode acquisition is disabled"
				puts stderr "**  1 - Enable acquisition using XRES method"
				puts stderr "**  2 - Enable acquisition using power-cycle method"
				terminate
			}

			if { $ENABLE_ACQUIRE == 2 && ![info exists ENABLE_POWER_SUPPLY] } {
				set ENABLE_POWER_SUPPLY default
			}

			if { $ENABLE_ACQUIRE == 2 } {
				kitprog3 acquire_config $kp3_status $kp3_target 1 2
			} elseif { $ENABLE_ACQUIRE == 1 } {
				kitprog3 acquire_config $kp3_status $kp3_target 0 2
			} else {
				kitprog3 acquire_config off
			}

			if { $ENABLE_ACQUIRE } {
				echo "** Auto-acquire enabled, use \"set ENABLE_ACQUIRE 0\" to disable"
			}
		}

		if { [string is integer $ENABLE_POWER_SUPPLY]} {
			if { $ENABLE_POWER_SUPPLY } {
				echo "** Enabling target power ($ENABLE_POWER_SUPPLY mV) \"set ENABLE_POWER_SUPPLY 0\" to disable"
				kitprog3 power_config on $ENABLE_POWER_SUPPLY
			}
		} elseif { $ENABLE_POWER_SUPPLY == "default" } {
			echo "** Enabling target power (default voltage) \"set ENABLE_POWER_SUPPLY 0\" to disable"
			kitprog3 power_config on
		} else {
			puts stderr "Invalid ENABLE_POWER_SUPPLY value - '$ENABLE_POWER_SUPPLY' (integer or 'default' expected)"
			terminate
		}
	}

	# Sets default device-specific adapter options
	# TODO: Research possibity to not overwrite default parameters set by user
	proc set_adapter_options {} {
		if {[using_jtag]} {
			adapter speed 1000
		} else {
			adapter speed $::ADAPTER_SPEED
		}
		adapter srst delay $::ADAPTER_SRST_DELAY
		adapter srst pulse_width $::ADAPTER_SRST_PULSE
	}
}