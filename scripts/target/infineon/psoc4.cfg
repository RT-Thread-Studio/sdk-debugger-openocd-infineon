#
# Copyright (C) <2024>
#   <Cypress Semiconductor Corporation (an Infineon company)>
#
# Configuration script for Cypress PSOC4 families of microcontrollers.
#

#
# PSOC 4 devices support SWD transports only.
#
source [find target/swj-dp.tcl]
source [find mem_helper.tcl]
source [find target/infineon/common/common_arm.cfg]
source [find target/infineon/common/common_ifx.cfg]
namespace import arm::*
namespace import ifx::*

set_or_global CHIPNAME psoc4

# Work-area is a space in RAM used for flash programming
# By default use 2kB
set_or_global WORKAREASIZE 0x800

###############################################################################
# KitProg3 acquire/power control stuff
###############################################################################
global ${CHIPNAME}::use_acquire
global ${CHIPNAME}::enable_power_supply
if { [adapter name] eq "kitprog3" } {
	if { [info exists PSOC4_USE_ACQUIRE] } {
		if { ( $PSOC4_USE_ACQUIRE != 0 ) && ( $PSOC4_USE_ACQUIRE != 1 ) && ( $PSOC4_USE_ACQUIRE != 2 ) } {
			puts stderr "** Invalid PSOC4_USE_ACQUIRE value ($PSOC4_USE_ACQUIRE). Allowed values are:"
			puts stderr "**  0 - Test Mode acquisition is disabled"
			puts stderr "**  1 - Enable acquisition using XRES method"
			puts stderr "**  2 - Enable acquisition using power-cycle method"
			terminate
		}

		if { $PSOC4_USE_ACQUIRE == 2 && ![info exists ENABLE_POWER_SUPPLY] } {
			set ENABLE_POWER_SUPPLY default
		}

		set ${CHIPNAME}::use_acquire $PSOC4_USE_ACQUIRE
	} else {
		set ${CHIPNAME}::use_acquire 1
	}

	if { [info exists ENABLE_POWER_SUPPLY] } {
		set ${CHIPNAME}::enable_power_supply $ENABLE_POWER_SUPPLY
	} else {
		set ${CHIPNAME}::enable_power_supply 0
	}
} else {
	set ${CHIPNAME}::use_acquire  0
	set ${CHIPNAME}::enable_power_supply 0
	echo "** Test Mode acquire not supported by selected adapter"
}

if { [set ${CHIPNAME}::use_acquire] } {
	echo "** Auto-acquire enabled, use \"set PSOC4_USE_ACQUIRE 0\" to disable"
	# set acquire mode: power cycle = 2, reset otherwise
	# Force 1 second timeout to avoud failure on PSoC4-HVMS
	if { [set ${CHIPNAME}::use_acquire] == 2 } {
		kitprog3 acquire_config on 0 1 3 1 0
	} else {
		kitprog3 acquire_config on 0 0 3 1 0
	}
}

if { [string is integer [set ${CHIPNAME}::enable_power_supply]]} {
	if { [set ${CHIPNAME}::enable_power_supply] } {
		echo "** Enabling target power ([set ${CHIPNAME}::enable_power_supply] mV) \"set ENABLE_POWER_SUPPLY 0\" to disable"
		kitprog3 power_config on [set ${CHIPNAME}::enable_power_supply]
	}
} elseif { [set ${CHIPNAME}::enable_power_supply]== "default" } {
	echo "** Enabling target power (default voltage) \"set ENABLE_POWER_SUPPLY 0\" to disable"
	kitprog3 power_config on
} else {
	puts stderr "Invalid ENABLE_POWER_SUPPLY value - '[set ${CHIPNAME}::enable_power_supply]' (integer or 'default' expected)"
	terminate
}

###############################################################################
# Adapter and SWJ settings
###############################################################################

adapter speed 2000
swj_newdap $CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf

###############################################################################
# Configure DAP
###############################################################################

dap create $CHIPNAME.dap -chain-position $CHIPNAME.cpu -power-down-on-quit

###############################################################################
# Configure CM0-AP
###############################################################################

# Order of examination is important
target create $CHIPNAME.mem_ap mem_ap -dap $CHIPNAME.dap -ap-num 0 -coreid 255
target create $CHIPNAME.cpu cortex_m -dap $CHIPNAME.dap -ap-num 0

$CHIPNAME.cpu cortex_m reset_config sysresetreq
$CHIPNAME.cpu configure -work-area-phys 0x20000000 -work-area-size $WORKAREASIZE -work-area-backup 0
$CHIPNAME.cpu configure -event reset-deassert-pre  "psoc4_deassert_pre  $CHIPNAME.cpu"
$CHIPNAME.cpu configure -event reset-deassert-post "psoc4_deassert_post $CHIPNAME.cpu"

proc check_protection {} {
	set target [target current]
	set dap [$target cget -dap]

	$dap apreg 0 0x00 0x03000052
	for { set i 0 } { $i < 3 } { incr i } {
		$dap apreg 0 0x04 0xE000ED00
		if { [catch {$dap apreg 0 0x0C}]  == 0 } {
			return 0
		}
	}

	return 1
}

proc psoc_soft_acquire {} {
	echo "** Attempting to soft-acquire the chip in Test Mode..."

	local_echo off
	scan [debug_level] "debug_level: %d" old_level
	scan [adapter speed] "adapter speed: %d kHz" adapter_speed
	debug_level -1
	reset_config srst_only
	adapter speed 4000
	adapter assert srst
	sleep 25
	adapter deassert srst
	catch { mww 0x40030014 0x80000000 }
	catch { mww 0x40030014 0x80000000 }
	catch { mww 0x40030014 0x80000000 }
	catch { mww 0x40030014 0x80000000 }
	catch { mww 0x40030014 0x80000000 }
	catch { mww 0x40030014 0x80000000 }
	catch { mww 0x40030014 0x80000000 }
	catch { mww 0x40030014 0x80000000 }
	catch { mww 0x40030014 0x80000000 }
	if { [catch { mww 0x40030014 0x80000000 }] != 0 } {
		puts stderr "** Unable to write to SRSS.TST_MODE register"
	}

	reset_config none
	adapter speed $adapter_speed
	debug_level $old_level
	local_echo on
}

$CHIPNAME.mem_ap configure -event reset-assert {}

$CHIPNAME.mem_ap configure -event examine-end {
	global CHIPNAME
	global ${CHIPNAME}::is_locked
	global ${CHIPNAME}::wrong_cfg_msg

	if { [info exist ${CHIPNAME}::is_locked] } return

	local_echo off
	set ${CHIPNAME}::is_locked [check_protection]
	local_echo on

	if { [set ${CHIPNAME}::is_locked] } {
		puts stderr "Warn:\tChip protection state is PROTECTED. Chip's resources access is locked down."
		puts stderr "\tThe state can be set back to OPEN but only after completely erasing the flash."
		puts stderr "\tTo do so, perform mass erase operation using 'psoc4 mass_erase 0' command."
		if { [set ${CHIPNAME}::use_acquire] == 0 } { psoc_soft_acquire }
		${CHIPNAME}.cpu configure -defer-examine
		${CHIPNAME}.cpu configure -event reset-assert {}
		targets ${CHIPNAME}.mem_ap
		if [ catch { psoc4 silicon_info sysreq} ] {
			set ${CHIPNAME}::wrong_cfg_msg "proper"
		}
	} else {
		targets $CHIPNAME.cpu
		$CHIPNAME.cpu arp_examine
		catch { psoc4 add_flash_banks }
		if [ catch { psoc4 silicon_info } ] {
			set ${CHIPNAME}::wrong_cfg_msg "proper"
		}
	}

	if { [info exist ${CHIPNAME}::wrong_cfg_msg] && [set ${CHIPNAME}::wrong_cfg_msg] != "" } {
		set cfg_file [set ${CHIPNAME}::wrong_cfg_msg]
		puts stderr "*******************************************************************************"
		puts stderr "* The detected device does not match the configuration file in use."
		puts stderr "* Flash programming will not work. Please use the $cfg_file"
		puts stderr "* configuration file, or attach a kit that matches the configuration file."
		puts stderr "*******************************************************************************"
		terminate
	}
}

flash bank $CHIPNAME.mflash psoc4 0x00000000 0 4 4 $CHIPNAME.cpu

proc init_reset { mode } {
	global RESET_MODE
	set RESET_MODE $mode
}

proc acquire { target } {
	global CHIPNAME
	global ${CHIPNAME}::is_locked
	global ${CHIPNAME}::use_acquire

	if { ![set ${CHIPNAME}::use_acquire] } {
		echo "----------------------------------------------------------------"
		echo "Test Mode acquire disabled. Use 'set PSOC4_USE_ACQUIRE 1' to enable"
		echo "----------------------------------------------------------------"
		error
	}

	# acquire will leave CPU in running state
	# openocd does not expect this
	# ignore possible error e.g. when listen window is disabled
	catch {[adapter name] acquire_psoc}

	# In the PROTECTED mode access is locked for everything except System Calls
	if { [set ${CHIPNAME}::is_locked] } {
		echo "**Failed to acquire PSoC 4 device in Test Mode"
		return
	}

	# we need to re-examine and halt target manually
	${target} arp_examine
	${target} arp_poll
	${target} arp_poll

	# Ensure target has stopped on WFI instruction
	set loops 200
	while { $loops } {
		set sleeping [ expr {[mrw 0xE000EDF0] & 0x00040000} ]
		if { $sleeping } break
		set loops [ expr {$loops - 1} ]
		sleep 10
	}

	if { $sleeping } {
		${target} arp_halt
		${target} arp_waitstate halted 100
		echo "** Device acquired successfully"
		return
	}

	echo "--------------------------------------------"
	echo "Failed to acquire PSoC 4 device in Test Mode"
	echo "--------------------------------------------"
	error
}


proc psoc4_deassert_pre { target } {
	global RESET_MODE
	global CHIPNAME
	global ${CHIPNAME}::use_acquire

	if { $RESET_MODE ne "run" && [set ${CHIPNAME}::use_acquire] } {
		catch {acquire $target}
	}
}

# Utility to make 'reset halt' work as reset;halt on a target
# It does not prevent running code after reset
proc psoc4_deassert_post { target } {
	global CHIPNAME
	global ${CHIPNAME}::is_locked
	global ${CHIPNAME}::use_acquire

	global RESET_MODE

	if { $RESET_MODE ne "run" } {
		if { [set ${CHIPNAME}::is_locked] } return

		if { ![set ${CHIPNAME}::use_acquire] } {
			psoc_soft_acquire
		}

		# PSoC 4 cleares AP registers including TAR during reset
		# Force examine to synchronize OpenOCD target status
		$target arp_examine
		catch {$target arp_poll}
		catch {$target arp_poll}
		set st [$target curstate]

		if { $st eq "reset" } {
			# we assume running state follows
			# if reset accidentally halts, waiting is useless
			catch { $target arp_waitstate running 100 }
			set st [$target curstate]
		}

		if { $st eq "running" } {
			echo "** $target: Ran after reset and before halt..."
			if { ![set ${CHIPNAME}::use_acquire] } {
				catch { psoc4 reset_halt }
			} else {
				$target arp_halt
			}
			$target arp_waitstate halted 100
		}
		psoc4 disable_cpu_read_relocations
	}
}

# Needed by VSCode launch configs
set _TARGETNAME $CHIPNAME.cpu

gdb_smart_program enable
