#
# Copyright (C) <2024-2025>
#   <Cypress Semiconductor Corporation (an Infineon company)>
#
# Main configuration script for CAT1D category of microcontrollers.

###############################################################################
# Include common misc scripts
###############################################################################

source [find mem_helper.tcl]
source [find target/swj-dp.tcl]
source [find target/cympn.cfg]
source [find target/infineon/common/common_arm.cfg]
source [find target/infineon/common/common_ifx.cfg]
namespace import arm::*
namespace import ifx::*

###############################################################################
# Target/setup identification
###############################################################################

# Include the chain of the configuration files defining the setup.
# The low-level definitions (variables and procedures) may overwrite any of the
# higher-level definitions when needed. It is performed using the target
# identification global variables and in bottom to high order:
#   BOARD -> DEVICE -> SERIES -> CATEGORY
# These variables, except CATEGORY, are either provided externally (in the
# command line or board file) or set to defaults if not.

# Include memory and register definitions
catch {source [find target/infineon/${CATEGORY}/memory_${CATEGORY}_${SERIES}_${DEVICE}_${BOARD}.cfg]}
catch {source [find target/infineon/${CATEGORY}/memory_${CATEGORY}_${SERIES}_${DEVICE}.cfg]}
       source [find target/infineon/${CATEGORY}/memory_${CATEGORY}_${SERIES}.cfg]
       source [find target/infineon/${CATEGORY}/memory_${CATEGORY}.cfg]

# Include configuration variables
catch {source [find target/infineon/${CATEGORY}/config_${CATEGORY}_${SERIES}_${DEVICE}_${BOARD}.cfg]}
catch {source [find target/infineon/${CATEGORY}/config_${CATEGORY}_${SERIES}_${DEVICE}.cfg]}
       source [find target/infineon/${CATEGORY}/config_${CATEGORY}_${SERIES}.cfg]
       source [find target/infineon/${CATEGORY}/config_${CATEGORY}.cfg]

# Include functions/subroutines
catch {source [find target/infineon/${CATEGORY}/func_${CATEGORY}_${SERIES}_${DEVICE}_${BOARD}.cfg]}
catch {source [find target/infineon/${CATEGORY}/func_${CATEGORY}_${SERIES}_${DEVICE}.cfg]}
catch {source [find target/infineon/${CATEGORY}/func_${CATEGORY}_${SERIES}.cfg]}
       source [find target/infineon/${CATEGORY}/func_${CATEGORY}.cfg]
       source [find target/infineon/cat1/func_cat1.cfg]

# Import definitions from included namespaces
namespace import ${CATEGORY}::${SERIES}::${DEVICE}::${BOARD}*
namespace import ${CATEGORY}::${SERIES}::${DEVICE}*
namespace import ${CATEGORY}::${SERIES}*
namespace import ${CATEGORY}::*
namespace import cat1::*


###############################################################################
# Adapter and SWJ settings
###############################################################################

adapter speed [expr { [using_jtag]? $::ADAPTER_SPEED_JTAG : $::ADAPTER_SPEED_SWD }]
adapter srst delay $::ADAPTER_SRST_DELAY
swj_newdap $CHIPNAME cpu -irlen $::SWJ_IRLEN -ircapture 0x1 -irmask 0xf -expected-id 0


###############################################################################
# Reset configuration
###############################################################################

# Set the reset configuration for M0SEC. Neither SYSRESETREQ nor VECTRESET work M0SEC.
reset_config srst_only srst_gates_jtag

# Overrides default init_reset procedure, stores reset mode in global variable
proc init_reset { mode } {
	log_proc_entry
	set ::RESET_MODE $mode
	if {[using_jtag]} {
		jtag arp_init-reset
	}
}


###############################################################################
# Configure DAP and M0SEC core
###############################################################################

dap create $CHIPNAME.dap -chain-position $CHIPNAME.cpu -adiv5 -power-down-on-quit
target create $CHIPNAME.m0sec cortex_m -dap $CHIPNAME.dap
$CHIPNAME.m0sec configure -work-area-phys $::WORKAREAADDR -work-area-size $::WORKAREASIZE -work-area-backup 1
$CHIPNAME.m0sec cortex_m reset_config sysresetreq
$CHIPNAME.m0sec configure -event reset-deassert-post "event_m0sec_reset_deassert_post"

proc event_m0sec_reset_deassert_post { } {
	log_proc_entry
	set tgt [target current]
	catch { $tgt arp_examine }
	catch { $tgt arp_poll }
	if {$::RESET_MODE eq "run"} return

	catch { $tgt arp_poll }
	if {[$tgt curstate] == "running"} {
		echo "Info : \[$tgt\] Ran after reset and before halt..."
		$tgt arp_halt
		$tgt arp_waitstate halted 1000
	}

	# Better to keep the caches disabled during debug. Ref. CDT_005546-27
	echo "Info : \[$tgt\] Disabling L1-Data-SRAM cache..."
	mww $::M0SECCPUSS_SRAM_CTL 0x0C
}


###############################################################################
# Flash banks
###############################################################################

flash bank $::CHIPNAME.main_ns   cmsis_flash [addr_to_ns $::RRAM_MAIN_BASE] $::RRAM_MAIN_SIZE 4 4 $::CHIPNAME.m0sec $::RRAM_FLASHLOADER 1024
flash bank $::CHIPNAME.main_s    virtual     [addr_to_s  $::RRAM_MAIN_BASE] $::RRAM_MAIN_SIZE 4 4 $::CHIPNAME.m0sec $::CHIPNAME.main_ns
flash bank $::CHIPNAME.prot_ns   cmsis_flash [addr_to_ns $::RRAM_PROT_BASE] $::RRAM_PROT_SIZE 4 4 $::CHIPNAME.m0sec $::RRAM_FLASHLOADER 1024
flash bank $::CHIPNAME.prot_s    virtual     [addr_to_s  $::RRAM_PROT_BASE] $::RRAM_PROT_SIZE 4 4 $::CHIPNAME.m0sec $::CHIPNAME.prot_ns
flash bank $::CHIPNAME.prot_p_ns cmsis_flash [addr_to_ns $::RRAM_PROT_P_BASE] $::RRAM_PROT_P_SIZE 4 4 $::CHIPNAME.m0sec $::RRAM_FLASHLOADER 1024
flash bank $::CHIPNAME.prot_p_s  virtual     [addr_to_s  $::RRAM_PROT_P_BASE] $::RRAM_PROT_P_SIZE 4 4 $::CHIPNAME.m0sec $::CHIPNAME.prot_p_ns

log_debug "--- Config file processed ---"
