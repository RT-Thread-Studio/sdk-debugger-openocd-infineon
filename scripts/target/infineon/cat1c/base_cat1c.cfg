#
# Copyright (C) <2019-2024>
#   <Cypress Semiconductor Corporation (an Infineon company)>
#
# Configuration script for CAT1C family of microcontrollers.
#
# Reset configuration - use hardware XRES pin
# If this line is commented-out OpenOCD will use SYSRESETREQ to reset the CM0+ core and
# all peripherals. This will also reset CM7 cores.

#reset_config srst_only connect_deassert_srst

source [find target/swj-dp.tcl]
source [find target/infineon/cat1/func_cat1.cfg]
source [find target/infineon/common/common_arm.cfg]
source [find target/infineon/common/common_ifx.cfg]
namespace import arm::*
namespace import ifx::*
namespace import cat1::*

set CATEGORY cat1c
set SERIES xmcxxxx
set_or_global CHIPNAME cat1c
set_or_global FLASH_DRIVER_NAME cat1c
set ${CHIPNAME}::TARGET_VARIANT $TARGET_VARIANT

###############################################################################
# Target/setup identification
###############################################################################

# Include the chain of the configuration files defining the setup.
# The low-level definitions (variables and procedures) may overwrite any of the
# higher-level definitions when needed. It is performed using the target
# identification global variables and in bottom to high order:
#   SERIES -> CATEGORY

# Include memory and register definitions
catch { source [find target/infineon/${CATEGORY}/memory_${CATEGORY}_${SERIES}.cfg] }
		source [find target/infineon/${CATEGORY}/memory_${CATEGORY}.cfg]

# Include configuration variables
catch { source [find target/infineon/${CATEGORY}/config_${CATEGORY}_${SERIES}.cfg] }
		source [find target/infineon/${CATEGORY}/config_${CATEGORY}.cfg]

# Include functions/subroutines
catch { source [find target/infineon/${CATEGORY}/func_${CATEGORY}_${SERIES}.cfg] }
		source [find target/infineon/${CATEGORY}/func_${CATEGORY}.cfg]
		source [find target/infineon/cat1/func_cat1.cfg]

# Import definitions from included namespaces
namespace import ${CATEGORY}::${SERIES}*
namespace import ${CATEGORY}::*
namespace import cat1::*

global TARGET
set TARGET $CHIPNAME.cpu
set_or_global QSPI_FLASHLOADER ../flm/cypress/cat1c/CAT1C_SMIF.FLM

###############################################################################
# Adapter and SWJ settings
###############################################################################
set_adapter_options
define_kitprog3_acquire_options ${FLASH_DRIVER_NAME}
swj_newdap $CHIPNAME cpu -irlen $::SWJ_IRLEN -ircapture 0x1 -irmask 0xf


###############################################################################
# Configure DAP
###############################################################################

dap create $CHIPNAME.dap -chain-position $CHIPNAME.cpu -adiv5 -power-down-on-quit

if {[using_jtag]} {
	jtag newtap $CHIPNAME bs -irlen $::SWJ_IRLEN -expected-id 0
}
###############################################################################
# Configure CM0-AP
###############################################################################
target create ${TARGET}.cm0  cortex_m -dap $CHIPNAME.dap -ap-num 1 -coreid 0
${TARGET}.cm0 configure -work-area-phys $WORKAREAADDR -work-area-size $WORKAREASIZE -work-area-backup 0
${TARGET}.cm0 cortex_m reset_config sysresetreq

${TARGET}.cm0 configure -event examine-end " \
	display_info ${FLASH_DRIVER_NAME} \
	${CHIPNAME}_main_cm0 ${CHIPNAME}_work_cm0; \
	enable_cm7x"

${TARGET}.cm0 configure -event examine-fail " \
	display_info ${FLASH_DRIVER_NAME} \
	${CHIPNAME}_main_cm0 ${CHIPNAME}_work_cm0"

${TARGET}.cm0 configure -event reset-deassert-post " \
	mxs40_reset_deassert_post ${FLASH_DRIVER_NAME} ${TARGET}.cm0; \
	enable_cm7x"

flash bank ${CHIPNAME}_main_cm0     ${FLASH_DRIVER_NAME} $MAIN_FLASH_ADDR 0 0 0 ${TARGET}.cm0
flash bank ${CHIPNAME}_work_cm0     ${FLASH_DRIVER_NAME} $WORK_FLASH_ADDR 0 0 0 ${TARGET}.cm0
flash bank ${CHIPNAME}_super_cm0    ${FLASH_DRIVER_NAME} $SUPER_FLASH_ADDR 0 0 0 ${TARGET}.cm0
flash bank ${CHIPNAME}_efuse_cm0    ${FLASH_DRIVER_NAME}_efuse $EFUSE_ADDR 1024 1 1 ${TARGET}.cm0 external

###############################################################################
# Configure CM70-AP
###############################################################################
if { $ENABLE_CM70 } {
	target create ${TARGET}.cm70 cortex_m -dap $CHIPNAME.dap -ap-num 2 -coreid 1
	# Set CSW[27], which according to ARM ADI v5 appendix E1.4 maps to AHB signal
	# HPROT[3], which according to AMBA AHB/ASB/APB specification chapter 3.7.3
	# makes the data access cacheable. This allows reading and writing data in the
	# CPU cache from the debugger, which is far more useful than going straight to
	# RAM when operating on typical variables, and is generally no worse when
	# operating on special memory locations.
	$CHIPNAME.dap apsel 2
	$CHIPNAME.dap apcsw [expr {(1 << 24) | (1 << 25) | (1 << 27) | (1 << 29) | (1 << 31)}]
	${TARGET}.cm70 configure -work-area-phys $WORKAREAADDR -work-area-size $WORKAREASIZE -work-area-backup 0

	${TARGET}.cm70 configure -event reset-assert {}
	${TARGET}.cm70 configure -event reset-deassert-post " \
		mxs40_reset_deassert_post ${FLASH_DRIVER_NAME} ${TARGET}.cm70"

	flash bank ${CHIPNAME}_main_cm70     virtual $MAIN_FLASH_ADDR 0 0 0 ${TARGET}.cm70 ${CHIPNAME}_main_cm0
	flash bank ${CHIPNAME}_work_cm70     virtual $WORK_FLASH_ADDR 0 0 0 ${TARGET}.cm70 ${CHIPNAME}_work_cm0
	flash bank ${CHIPNAME}_super_cm70    virtual $SUPER_FLASH_ADDR 0 0 0 ${TARGET}.cm70 ${CHIPNAME}_super_cm0
	flash bank ${CHIPNAME}_efuse_cm70    virtual $EFUSE_ADDR 1024 1 1 ${TARGET}.cm70 ${CHIPNAME}_efuse_cm0 external
}

###############################################################################
# Configure CM71-AP
###############################################################################

if { $ENABLE_CM71 } {
	target create ${TARGET}.cm71 cortex_m -dap $CHIPNAME.dap -ap-num 3 -coreid 2
	$CHIPNAME.dap apsel 3
	$CHIPNAME.dap apcsw [expr {(1 << 24) | (1 << 25) | (1 << 27) | (1 << 29) | (1 << 31)}]
	${TARGET}.cm71 configure -work-area-phys $WORKAREAADDR -work-area-size $WORKAREASIZE -work-area-backup 0

	${TARGET}.cm71 configure -event reset-assert {}
	${TARGET}.cm71 configure -event reset-deassert-post " \
		mxs40_reset_deassert_post ${FLASH_DRIVER_NAME} ${TARGET}.cm71"

	flash bank ${CHIPNAME}_main_cm71     virtual $MAIN_FLASH_ADDR 0 0 0 ${TARGET}.cm71 ${CHIPNAME}_main_cm0
	flash bank ${CHIPNAME}_work_cm71     virtual $WORK_FLASH_ADDR 0 0 0 ${TARGET}.cm71 ${CHIPNAME}_work_cm0
	flash bank ${CHIPNAME}_super_cm71    virtual $SUPER_FLASH_ADDR 0 0 0 ${TARGET}.cm71 ${CHIPNAME}_super_cm0
	flash bank ${CHIPNAME}_efuse_cm71    virtual $EFUSE_ADDR 1024 1 1 ${TARGET}.cm71 ${CHIPNAME}_efuse_cm0 external
}

targets ${TARGET}.cm0

# example of qspi_config.cfg
#set SMIF_BANKS {
#  1 {addr 0x60000000 size 0x10000 psize 0x100 esize 0x1000}
#  2 {addr 0x60010000 size 0x10000 psize 0x100 esize 0x1000}
#  3 {addr 0x60020000 size 0x10000 psize 0x100 esize 0x1000}
#  4 {addr 0x60030000 size 0x10000 psize 0x100 esize 0x1000}
#}

catch {source [find qspi_config.cfg]}

if { [info exists SMIF_BANKS] } {

	set num_banks [array size SMIF_BANKS]
	set bank_param ""
	if { $num_banks > 1 } {
		set bank_param "prefer_sector_erase"
	}

	foreach {key value} [array get SMIF_BANKS] {
		flash bank ${CHIPNAME}_smif${key}_cm0 cmsis_flash $value(addr) $value(size) 4 4 ${TARGET}.cm0 ${QSPI_FLASHLOADER} 0x800 {*}$bank_param
		flash bank ${CHIPNAME}_smif${key}_cm70 virtual $value(addr) $value(size) 0 0 ${TARGET}.cm70 ${CHIPNAME}_smif${key}_cm0
		if { $ENABLE_CM71 } {
			flash bank ${CHIPNAME}_smif${key}_cm71 virtual $value(addr) $value(size) 0 0 ${TARGET}.cm71 ${CHIPNAME}_smif${key}_cm0
		}
	}
}

###############################################################################
# Misc. configuration
###############################################################################
gdb_smart_program enable
