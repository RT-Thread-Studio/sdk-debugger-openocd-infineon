#
# Copyright (C) <2019-2021>
#   <Cypress Semiconductor Corporation (an Infineon company)>
#
# Common configuration for PSoC 64 family of microcontrollers.
# PSoC 64 is a dual-core device with CM0+ and CM4 cores. Both cores share
# the same Flash/RAM/MMIO address space.

###############################################################################
# Include common misc scripts
###############################################################################

source [find mem_helper.tcl]
source [find target/swj-dp.tcl]
source [find target/infineon/common/common_arm.cfg]
source [find target/infineon/common/common_ifx.cfg]
namespace import arm::*
namespace import ifx::*

###############################################################################
# Target/setup identification
###############################################################################

set CATEGORY cat1a
set SERIES cyxx64xx

set_or_global CHIPNAME psoc6
set_or_global FLASH_DRIVER_NAME psoc6
set ${CHIPNAME}::TARGET_VARIANT $TARGET_VARIANT

# Include the chain of the configuration files defining the setup.
# The low-level definitions (variables and procedures) may overwrite any of the
# higher-level definitions when needed. It is performed using the target
# identification global variables and in bottom to high order:
#   BOARD -> DEVICE -> SERIES -> CATEGORY
# These variables, except CATEGORY, are either provided externally (in the
# command line or board file) or set to defaults if not.

# Include memory and register definitions
catch { source [find target/infineon/${CATEGORY}/memory_${CATEGORY}_${SERIES}.cfg] }
source [find target/infineon/${CATEGORY}/memory_${CATEGORY}.cfg]

# Include configuration variables
catch { source [find target/infineon/${CATEGORY}/config_${CATEGORY}_${SERIES}.cfg] }
source [find target/infineon/${CATEGORY}/config_${CATEGORY}.cfg]

# Include functions/subroutines
catch {source [find target/infineon/${CATEGORY}/func_${CATEGORY}_${SERIES}.cfg] }
source [find target/infineon/${CATEGORY}/func_${CATEGORY}.cfg]
source [find target/infineon/cat1/func_cat1.cfg]

# Import definitions from included namespaces
namespace import ${CATEGORY}::${SERIES}*
namespace import ${CATEGORY}::*
namespace import cat1::*

global TARGET
set TARGET $CHIPNAME.cpu

###############################################################################
# Adapter and SWJ settings
###############################################################################

if {[using_jtag]} {
	puts stderr "JTAG transport not supported by selected target, please switch to SWD"
	shutdown
}

set_adapter_options
swd newdap $CHIPNAME cpu -irlen $::SWJ_IRLEN -ircapture 0x1 -irmask 0xf

if { [adapter name] eq "kitprog3" } {
	set_or_global ENABLE_ACQUIRE 1
	set_or_global ENABLE_POWER_SUPPLY 0
} else {
	set ENABLE_ACQUIRE  0
	set ENABLE_POWER_SUPPLY 0
	echo "** Test Mode acquire not supported by selected adapter"
}

if { $ENABLE_POWER_SUPPLY } {
	echo "** Enabling target power ($ENABLE_POWER_SUPPLY mV) \"set ENABLE_POWER_SUPPLY 0\" to disable"
	kitprog3 power_config on $ENABLE_POWER_SUPPLY
}

if {$POWERUP_DELAY} {
	echo "** Using POWERUP_DELAY: $POWERUP_DELAY ms"
}

if {$ENABLE_EFUSE} {
	echo "** eFuse Flash Bank enabled"
}

if { ![info exists TARGET_AP] } {
	set TARGET_AP "sys_ap"
	echo "** TARGET_AP not defined, using 'sys_ap' by default"
}

echo "** Using TARGET_AP: $TARGET_AP"

if { $TARGET_AP eq "sys_ap" } {
	set ENABLE_SYSAP 1
	set ENABLE_CM0   0
	set ENABLE_CM4   0
} elseif { $TARGET_AP eq "cm0_ap" } {
	set ENABLE_SYSAP 1
	set ENABLE_CM0   1
	set ENABLE_CM4   0
} elseif { $TARGET_AP eq "cm4_ap" } {
	set ENABLE_SYSAP 1
	set ENABLE_CM0   0
	set ENABLE_CM4   1
} elseif { $TARGET_AP eq "cm0_cm4_ap" } {
	set ENABLE_SYSAP 1
	set ENABLE_CM0   1
	set ENABLE_CM4   1
} else {
	puts stderr "Error: Invalid TARGET_AP: $TARGET_AP, please use one of the following: sys_ap, cm0_ap, cm4_ap, cm0_cm4_ap"
	shutdown
}

if { $ACQUIRE_TIMEOUT > 30000 } {
	set ACQUIRE_TIMEOUT 30000
}
echo "** Using ACQUIRE_TIMEOUT: $ACQUIRE_TIMEOUT ms"


set ACQ_AP_DICT [dict create]
dict set ACQ_AP_DICT sys_ap 0
dict set ACQ_AP_DICT cm0_ap 1
dict set ACQ_AP_DICT cm4_ap 2
dict set ACQ_AP_DICT cm0_cm4_ap 2

if { $ENABLE_ACQUIRE } {
	echo "** Auto-acquire enabled, use \"set ENABLE_ACQUIRE 0\" to disable"
	kitprog3 acquire_config on 2 0 2 [expr {$ACQUIRE_TIMEOUT / 1000}] $ACQ_AP_DICT($TARGET_AP)
} elseif { [adapter name] eq "kitprog3" } {
	# Just disable HW acquisition during 'init', this allows to use proper Reset in Attach configurations
	echo "** Auto-acquire disabled, however, it will be used for reset processing"
	kitprog3 acquire_config off 2 0 2 [expr {$ACQUIRE_TIMEOUT / 1000}] $ACQ_AP_DICT($TARGET_AP)
}

###############################################################################
# Configure DAP
###############################################################################

dap create $CHIPNAME.dap -chain-position $CHIPNAME.cpu -adiv5 -power-down-on-quit

###############################################################################
# Reset configuration
###############################################################################

proc reset_deassert_post { target } {
	switch $::TARGET_AP {
		sys_ap     { if { $target != "sysap" } return }
		cm0_ap     { if { $target != "cm0"   } return }
		cm4_ap     { if { $target != "cm4"   } return }
		cm0_cm4_ap { if { $target != "cm4"   } return }
		default    { error "Invalid TARGET_AP: $::TARGET_AP" }
	}

	if {$::RESET_MODE == "run"} {
		psoc6 secure_acquire $::MAGIC_NUMBER_ADDR run no_handshake $::ACQUIRE_TIMEOUT
		if { $::TARGET_AP == "cm0_cm4_ap" } {
			set prev_tgt [target current]
			targets psoc64.cpu.cm0
			psoc6 secure_acquire $::MAGIC_NUMBER_ADDR run no_handshake $::ACQUIRE_TIMEOUT
			targets $prev_tgt
		}
	} else {
		# Always use KP3's HW acquisition, even if ENABLE_ACQUIRE=0, we are doing Reset anyway
		if { [adapter name] eq "kitprog3" } {
			kitprog3 acquire_psoc
		}

		psoc6 secure_acquire $::MAGIC_NUMBER_ADDR halt handshake $::ACQUIRE_TIMEOUT
		if { $::TARGET_AP == "cm0_cm4_ap" } {
			set prev_tgt [target current]
			targets psoc64.cpu.cm0
			psoc6 secure_acquire $::MAGIC_NUMBER_ADDR halt handshake $::ACQUIRE_TIMEOUT
			 targets $prev_tgt
		}
	}
}
reset_config srst_only srst_gates_jtag

###############################################################################
# Configure SYS-AP
###############################################################################

if { $ENABLE_SYSAP } {
	target create ${TARGET}.sysap mem_ap -dap $CHIPNAME.dap -ap-num 0 -coreid 255
	${TARGET}.sysap configure -work-area-phys $WORKAREAADDR -work-area-size $WORKAREASIZE -work-area-backup 0
	${TARGET}.sysap configure -event examine-end "display_info psoc64"
	${TARGET}.sysap configure -event reset-deassert-post "reset_deassert_post sysap"
}


###############################################################################
# Configure CM0-AP
###############################################################################

if { $ENABLE_CM0 } {
	target create ${TARGET}.cm0 cortex_m -dap $CHIPNAME.dap -ap-num 1 -coreid 1 -defer-examine
	${TARGET}.cm0 configure -work-area-phys $WORKAREAADDR_CM -work-area-size $WORKAREASIZE_CM -work-area-backup 0
	${TARGET}.cm0 configure -event examine-end "display_info psoc64"
	${TARGET}.cm0 configure -event reset-deassert-post "reset_deassert_post cm0"
	${TARGET}.cm0 configure -event gdb-start "mww 0x40260100 0"
	${TARGET}.cm0 configure -event gdb-attach "gdb_attach ${TARGET}.cm0"
}


###############################################################################
# Configure CM4-AP
###############################################################################

if { $ENABLE_CM4 } {
	target create ${TARGET}.cm4 cortex_m -dap $CHIPNAME.dap -ap-num 2 -coreid 2 -defer-examine
	${TARGET}.cm4 configure -work-area-phys $WORKAREAADDR_CM -work-area-size $WORKAREASIZE_CM -work-area-backup 0
	${TARGET}.cm4 configure -event examine-end "display_info psoc64"
	${TARGET}.cm4 configure -event reset-deassert-post "reset_deassert_post cm4"
	${TARGET}.cm4 configure -event gdb-start "mww 0x40260100 0"
	${TARGET}.cm4 configure -event gdb-attach "gdb_attach ${TARGET}.cm4"
}

targets ${TARGET}.sysap

###############################################################################
# Misc. configuration
###############################################################################
define_flash_banks