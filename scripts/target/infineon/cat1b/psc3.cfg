#
# Copyright (C) <2023-2024>
#   <Cypress Semiconductor Corporation (an Infineon company)>
#
# Configuration script for PSC3 family of microcontrollers.

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]
source [find target/cympn.cfg]
source [find target/infineon/common/common_arm.cfg]
source [find target/infineon/common/common_ifx.cfg]

namespace import arm::*
namespace import ifx::*

###############################################################################
# Target/setup identification
###############################################################################

set CATEGORY cat1b
set CHIPNAME psc3

if {![info exists SERIES]} {
	puts "Warn: Do not use this config directly."
	puts "Warn: Need to define the target explicitly:"
	puts "Info: Use: -c \"set SERIES <series_name>; \[set DEVICE <device_name>\]; \[set BOARD <board_name>\]\""
}

# Set default target identification variables, if not set externally.
# Supported variants for CAT1B:
#   SERIES | DEVICE | BOARD
#   -------+--------+---------------
#   psc3  | a0     | n/a (generic)
set_or_global SERIES  psc3
set_or_global DEVICE  a0
set_or_global BOARD   generic

puts "***************************************"
puts "** SERIES:   $SERIES"
puts "** DEVICE:   $DEVICE"
puts "** BOARD:    $BOARD"
puts "***************************************"

# Include the chain of the configuration files defining the setup.
# The low-level definitions (variables and procedures) may overwrite any of the
# higher-level definitions when needed. It is performed using the target
# identification global variables and in bottom to high order:
#   BOARD -> DEVICE -> SERIES -> CATEGORY
# These variables, except CATEGORY, are either provided externally (in the
# command line or board file) or set to defaults if not.

# Include memory and register definitions
catch {source [find target/infineon/${CATEGORY}/memory_${CATEGORY}_${SERIES}_${DEVICE}_${BOARD}.cfg]}
catch {source [find target/infineon/${CATEGORY}/memory_${CATEGORY}_${SERIES}_${DEVICE}.cfg]}
       source [find target/infineon/${CATEGORY}/memory_${CATEGORY}_${SERIES}.cfg]
       source [find target/infineon/${CATEGORY}/memory_${CATEGORY}.cfg]

# Include configuration variables
catch {source [find target/infineon/${CATEGORY}/config_${CATEGORY}_${SERIES}_${DEVICE}_${BOARD}.cfg]}
catch {source [find target/infineon/${CATEGORY}/config_${CATEGORY}_${SERIES}_${DEVICE}.cfg]}
       source [find target/infineon/${CATEGORY}/config_${CATEGORY}_${SERIES}.cfg]
       source [find target/infineon/${CATEGORY}/config_${CATEGORY}.cfg]

# Include functions/subroutines
catch {source [find target/infineon/${CATEGORY}/func_${CATEGORY}_${SERIES}_${DEVICE}_${BOARD}.cfg]}
catch {source [find target/infineon/${CATEGORY}/func_${CATEGORY}_${SERIES}_${DEVICE}.cfg]}
catch {source [find target/infineon/${CATEGORY}/func_${CATEGORY}_${SERIES}.cfg]}
       source [find target/infineon/${CATEGORY}/func_${CATEGORY}.cfg]
       source [find target/infineon/cat1/func_cat1.cfg]

# Import definitions from included namespaces
namespace import ${CATEGORY}::${SERIES}::${DEVICE}::${BOARD}*
namespace import ${CATEGORY}::${SERIES}::${DEVICE}*
namespace import ${CATEGORY}::${SERIES}*
namespace import ${CATEGORY}::*
namespace import cat1::*


set FLASH_DRIVER_NAME    psc3

set _TARGETNAME          $CHIPNAME
set _TARGET_SYS          ${_TARGETNAME}.sys
set _TARGET_CM33         ${_TARGETNAME}.cm33

###############################################################################
# Adapter and SWJ settings
###############################################################################

adapter speed $::ADAPTER_SPEED
adapter srst delay $::ADAPTER_SRST_DELAY
swj_newdap $CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id 0


###############################################################################
# Configure DAP
###############################################################################

dap create $CHIPNAME.dap -chain-position $CHIPNAME.cpu -adiv6 -power-down-on-quit
$CHIPNAME.dap apsel 0xF0000000
$CHIPNAME.dap apcsw 0x0B000000 0x0F000000

# Overrides default init_reset procedure, stores reset mode in global variable
proc init_reset { mode } {
	set ::RESET_MODE $mode
	if {[using_jtag]} {
		jtag arp_init-reset
	}
}


###############################################################################
# Configure CM33-AP
###############################################################################

if {$ENABLE_CM33} {
	# Create CM33 target
	target create $_TARGET_CM33 cortex_m -dap $CHIPNAME.dap -ap-num 0xF0002000

	# Configure events, define callbacks
	$_TARGET_CM33 configure -work-area-phys $WORKAREAADDR -work-area-size $WORKAREASIZE
	$_TARGET_CM33 cortex_m reset_config sysresetreq
	$_TARGET_CM33 configure -event halted  "event_cm33_halted"
	$_TARGET_CM33 configure -event reset-start "cm33_reset_start"

	# Setup FLASH WaitStates properly, disable MSPLIM
	$_TARGET_CM33 configure -event reset-init { reg msplim_s 0 }

	proc cm33_reset_start {} {
		if {$::ENABLE_ACQUIRE} {
			acquire_test_mode acquire_and_check
		}
	}

	proc event_cm33_halted {} {
		read_and_init_secure
		update_flash_size_from_devicedb
		# Check if MCU in dual bank mode and change flash banks if necessary
		catch {$::FLASH_DRIVER_NAME handle_flash_bank_mode}
	}

	proc event_cm33_reset_deassert_post {} {
		$::_TARGET_CM33 arp_examine
		$::_TARGET_CM33 arp_poll

		if {$::RESET_MODE eq "run"} return
		$::_TARGET_CM33 arp_poll
		$::_TARGET_CM33 arp_halt
		$::_TARGET_CM33 arp_waitstate halted 100
	}
}

###############################################################################
# Configure SYS-AP
###############################################################################

target create $_TARGET_SYS mem_ap -dap $CHIPNAME.dap -ap-num 0xF0000000
$_TARGET_SYS configure -event examine-end "event_sys_examine_end"

proc event_sys_examine_end {} {
	catch {display_chip_info $::CHIPNAME}
}


###############################################################################
# Configure DAP
###############################################################################

if {$ENABLE_ACQUIRE} {
	$CHIPNAME.dap configure -event init-post "event_dap_init_post"
	$CHIPNAME.dap configure -event init-fail "event_dap_init_fail"
	
	proc event_dap_init_post {} {
		log_proc_entry
		if {[info exist ::is_in_dap_init] || [adapter name] != "kitprog3" || [using_jtag]} return
		set ::is_in_dap_init 1
		if {$::ENABLE_ACQUIRE} {
			acquire_test_mode check_only
		}
		catch {unset ::is_in_dap_init}
	}

	proc event_dap_init_fail {} {
		log_proc_entry
		if {[info exist ::is_in_dap_init]} return
		set ::is_in_dap_init 1
		acquire_test_mode acquire_and_check
		catch {unset ::is_in_dap_init}
	}
}

if {[using_jtag]} {
	swj_newdap $CHIPNAME bs -irlen 4 -expected-id 0
}

###############################################################################
# Misc. configuration
###############################################################################

if {$ENABLE_CM33} {
	define_flash_banks_psc3
}

kitprog3_acquire_config $TIMEOUT_RESET_HANDSHAKE

# Set default Access Port
if {$ENABLE_CM33} {
	targets $::_TARGET_CM33
}

